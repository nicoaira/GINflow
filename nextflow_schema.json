{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GINflow parameter schema",
  "type": "object",
  "properties": {
    "input": {"type": "string", "description": "Path to the input transcript table (TSV/CSV)"},
    "queries": {"type": "string", "description": "CSV/TSV file listing query transcript IDs"},
    "outdir": {"type": "string", "description": "Directory for pipeline outputs"},
    "header": {"type": "boolean", "description": "Indicate whether the input TSV includes a header row"},
    "split_size": {"type": "integer", "minimum": 1, "description": "Number of rows per batch when generating embeddings"},
    "id_column": {"type": "string", "description": "Column containing unique transcript identifiers"},
    "structure_column_name": {"type": ["string", "null"], "description": "Column containing secondary structure strings"},
    "sequence_column": {"type": ["string", "null"], "description": "Column containing primary sequences (optional override)"},
    "keep_cols": {"type": ["string", "null"], "description": "Comma-separated additional columns to retain during embedding"},

    "node_embeddings_tsv": {"type": ["string", "null"], "description": "Reuse precomputed node-level embeddings"},
    "ginfinity_model_path": {"type": ["string", "null"], "description": "Optional custom ginfinity model checkpoint"},
    "num_workers": {"type": "integer", "minimum": 1, "description": "Worker processes for ginfinity embedding"},
    "inference_batch_size": {"type": "integer", "minimum": 1, "description": "Batch size for ginfinity inference"},
    "use_gpu": {"type": "boolean", "description": "Enable GPU for ginfinity embedding"},

    "window_size": {"type": "integer", "minimum": 1, "description": "Sliding window length (number of nodes)"},
    "window_stride": {"type": "integer", "minimum": 1, "description": "Stride between windows"},
    "max_unpaired_fraction": {
      "type": ["number", "null"],
      "minimum": 0.0,
      "maximum": 1.0,
      "description": "Filter windows whose dot-bracket structure has this unpaired fraction or higher"
    },

    "faiss_k": {"type": "integer", "minimum": 1, "description": "Top-K neighbours retrieved per query window"},
    "seed_similarity_threshold": {"type": "number", "minimum": -1.0, "maximum": 1.0, "description": "Minimum cosine similarity to keep a seed"},
    "index_type": {"type": "string", "enum": ["flat_ip", "flat_l2", "ivf", "ivfpq", "opq_ivfpq", "hnsw", "hnswsq8"], "description": "FAISS index variant"},
    "faiss_metric": {"type": "string", "enum": ["ip", "l2"], "description": "Metric used by FAISS"},
    "faiss_nlist": {"type": "integer", "minimum": 1, "description": "Number of coarse clusters for IVF indices"},
    "faiss_pq_m": {"type": "integer", "minimum": 1, "description": "Sub-quantizers for IVFPQ"},
    "faiss_pq_bits": {"type": "integer", "minimum": 4, "maximum": 16, "description": "Bits per sub-quantizer"},
    "faiss_opq_m": {"type": "integer", "minimum": 1, "description": "OPQ matrix size when using opq_ivfpq"},
    "faiss_hnsw_m": {"type": "integer", "minimum": 2, "description": "HNSW connectivity parameter"},
    "faiss_hnsw_efc": {"type": "integer", "minimum": 1, "description": "HNSW efConstruction"},
    "faiss_hnsw_efs": {"type": ["integer", "null"], "minimum": 1, "description": "HNSW efSearch parameter"},
    "faiss_exact_rescore": {"type": ["boolean", "null"], "description": "Recompute similarities using float32 vectors before filtering"},
    "faiss_use_gpu": {"type": "boolean", "description": "Query FAISS index on GPU"},
    "faiss_nprobe": {"type": ["integer", "null"], "minimum": 1, "description": "Override nprobe for IVF indices"},

    "cluster_span": {"type": "integer", "minimum": 1, "description": "Maximum separation (nt) between neighbouring seeds"},
    "cluster_min_seeds": {"type": "integer", "minimum": 1, "description": "Minimum seeds required to keep a cluster"},
    "cluster_diagonal_tolerance": {"type": "integer", "minimum": 0, "description": "Permitted offset (nt) beyond current diagonal range when adding a seed"},
    "cluster_max_diagonal_span": {"type": "integer", "minimum": 0, "description": "Maximum diagonal spread (nt) allowed within a cluster; 0 disables the cap"},

    "alignment_gamma": {"type": "number", "description": "Scaling factor for z-scored cosine similarities"},
    "band_width": {"type": "integer", "minimum": 1, "description": "Minimum Smith–Waterman band width"},
    "band_buffer": {"type": "integer", "minimum": 0, "description": "Additional slack added to the observed diagonal span when adapting the band"},
    "band_max_width": {"type": "integer", "minimum": 0, "description": "Hard cap on the Smith–Waterman band width after adaptation; 0 means unlimited"},
    "xdrop": {"type": "number", "minimum": 0.0, "description": "X-drop threshold"},
    "gap_open": {"type": "number", "description": "Gap opening penalty"},
    "gap_extend": {"type": "number", "description": "Gap extension penalty"},
    "alignment_padding": {"type": "integer", "minimum": 0, "description": "Extra nucleotides around seed cluster for alignment"},
    "background_samples": {"type": "integer", "minimum": 10, "description": "Random node pairs sampled for μ₀/σ₀"},
    "random_seed": {"type": "integer", "description": "Random seed for background sampling"},
    "score_min": {"type": "number", "description": "Lower clamp for per-position scores"},
    "score_max": {"type": "number", "description": "Upper clamp for per-position scores"},
    "top_n": {"type": "integer", "minimum": 1, "description": "Maximum alignments reported"},
    "plot_scoring_matrices": {"type": "boolean", "description": "Plot banded scoring matrices for the reported alignments"}
  },
  "required": ["input", "queries"]
}
